Name=sub
Ancestor=sub
||
unit |Name|;

interface

uses
  Classes,
  SysUtils;


{# class T|Name|
---
class: T|Name|
attributes:
...
}

type

  T|Name| = class(|Ancestor|)
  private
    //# genMemberVars
    //# endGenMemberVars

    //# genCollections
    //# endGenCollections

  protected

    procedure   RestoreAttributes(AStream : TStream); override;
    procedure   SaveAttributes(AStream : TStream); override;

    //# genGetSetDeclarations
    //# endGenGetSetDeclarations

  public
    procedure   RestoreYamlAttribute(AName, AValue : string); override;
    procedure   SaveYamlAttributes(AEmitter: TYamlEmitter); override;

    //# genProperty
    //# endGenProperty
  end;


implementation

uses
  TLoggerUnit;

var
  log : ILogger;


{ T|Name| }

procedure T|Name|.RestoreYamlAttribute(AName, AValue : string);
  begin
  //# genRestoreYamlVars
  //# endGenRestoreYamlVars
   inherited RestoreYamlAttribute(AName, AValue);
  end;

procedure T|Name|.RestoreAttributes(AStream : TStream);
  begin
  inherited;

  //# genRestoreVars
  //# endGenRestoreVars
  end;

procedure T|Name|.SaveAttributes(AStream : TStream);
  begin
  inherited;

  //# genSaveVars
  //# endGenSaveVars

  end;
  
procedure T|Name|.SaveYamlAttributes(AEmitter : TYamlEmitter);
  begin
  inherited;
  //# genSaveYamlVars
  //# endGenSaveYamlVars
  end;

//# genGetSetMethods
//# endGenGetSetMethods

initialization
  T|Name|.RegisterClass;

  log := Logger.GetInstance('T|Name|');
end.
